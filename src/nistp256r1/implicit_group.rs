use core::ops::{Add, Mul, Sub,Neg};
use core::cmp::{PartialEq,PartialOrd};
use crate::FieldElement;
use super::scalar256::U256;
#[derive(Debug, Clone,Eq,Hash, Copy,PartialEq,PartialOrd, Ord)]

pub struct ImplicitP256r1{
    pub num:U256,
}
impl ImplicitP256r1{
    pub const DIVISOR_32:[&str; 34]=["59466192", "60998928", "109719312", "130148112", "166525104", "240132432", "312406896", "683735856", "1443641296", "1521048336", "2081758768", "2165461944", "2244236892", "2489965532", 
                                    "2557831461", "2596690384", "2663619856", "2665439444", "2772611202", "2841567112", "2853539664", "2992315856", "3034077861", "3122638152", "3410441948", "3696814936", "3732058214", "3734948298", 
                                    "3895035576", "3995429784", "3998159166", "4045437148", "4220860753", "4262350668"];
    pub const DIVISOR_64:[&str; 86]=["9899708110744272", "21666568459006992", "31143481820078064", "103660442293178832", "110965645154450544", "284466065847200976", "425619678608128848", "447487348497888912", 
                                    "533668248894507024", "809968263824473008", "839501853987707088", "946839482286488688", "1013565557751241296", "1167989956847517264", "1274143366333683696", "1456897089218611632", 
                                    "1494448486774731888", "1776303851888715312", "1837339463690557968", "2350884239291726256", "2695962800708857104", "2885953840009259568", "3188574871922147952", "3887630683694088432",
                                    "4148264231133909456", "4849252165076883216", "4974241223843102544", "5324788071003000048", "5588072506722806544", "5981877533616768048", "6636852343193244208", "7157696696395809968", 
                                    "7653839637725945616", "8491882899406936336", "9078919291808864016", "9292696316277479848", "9472611417877499676", "9562917771689047599", "9695658524892571078", "9934105272187867208",
                                    "9955278514789866312", "10028811239310962242", "10072999060392382736", "10190155983800141672", "10365910867021715718", "10432048811857035261", "10509797790341565596", "10609992074248449679", 
                                    "10613106248617175376", "10736545044593714952", "10870925160169134644", "11321304464136294557", "11500907439261678278", "11638086994903110864", "11651756767530070024", "12441141052353194997",
                                    "12630148557169999568", "12737824349110404504", "12750557028918730132", "13047257980725614326", "13263230320125745506", "13746842859048703566", "13803361182385225237", "13807412653234178928", 
                                    "13821214489362287624", "13909398415809380348", "13939044474416219772", "14277658749095377543", "14543487787338856617", "14715463620535845026", "14901157908281800812", "15043216858966443363", 
                                    "15109498590588574104", "15250781216264326193", "15285233975700212508", "15752498043383875142", "15764696685512348394", "16306387740253701966", "16325540768829096131", "16531381165721636026",
                                    "17251361158892517417", "17477635151295105036", "17684307093500994008", "17696387703616272142", "18152510579338497478", "18329123812064938088"];

    pub const DIVISOR_128:[&str;89]=["378940091476832240907387904999152", "437086358793092816310758237867816112", "1855751073935255523709688417593391088", "3992367893855408110377354735698792208", "4061509413864030786575121266518081968", 
                                    "4827516558900595831230769127978117232", "6176829495864249236728614834124872144", "6939062568800387938915759357918176144", "7117916311536308063209946302581087696", "7489821242864532428553323597807571792", 
                                    "7619533142943067755612223522145362032", "8907108017126451463256771207959624752", "11367581865710436833364529132943889264", "12803059105814800281661471491370155984", "13518651018256622964148608625158733584",
                                    "15186879502545590864763249132875077584", "16392273680082161093129857004795309712", "19431681718109539564401441315029849328", "20446970173138543034333567004170303856", "20801079472413699206031491335331380176",
                                    "20973989076169960917897934034023232304", "23562221138583585406913373827789096304", "25361460231970735845761646263885038416", "28020862180753132440619516005727255824", "36454511805106263397402510429626474672", 
                                    "44013050614219118277426053354358264624", "44750377897987725367537657763898202416", "58219235683821958410736034294316972048", "69235967601279663663466120311240018288", "78426371166393235145417744083264655952", 
                                    "79784592316190216796573125726231041392", "83953267814427246525982645986696025584", "107418589782826430307132682993739765328", "127419014930911614977798063709420072528", "168457352706359290829302062494419075472", 
                                    "174606457724279412240649356373889017401", "177259102747793934142428658481445865744", "177489918535118502133822280322538060752", "178948987674230258600000938969015464356", "180328951049652603549489290024106901424", 
                                    "182189079102721225620592921815864046932", "183098093431076611599556009120111102529", "186144153051008403146344164551956186698", "189998063706470437519971289489206467184", "192915685572153105519103248215023225989", 
                                    "193975238547638906268703307890077831592", "198980876936205021044155369428377840918", "207646955649260399737173478785558752031", "209114712604929320486356192721628229698", "210801556405326017963743585255044452464", 
                                    "214038637974948204251035926560576456869", "215689194846878725101298186708623308476", "217745449862935800007314155627838883799", "225082959558740280631134610591979715942", "227254299128212704999491118971820268716", 
                                    "229122460076874360310494304672024569823", "232011348033913320638527492912991273858", "232808610299039216320865808498518689868", "233111759202814089070125741409530622044", "233271003908378534330329167358747560531", 
                                    "235097055717597486790021779520197598608", "236029418935396058023195496940100164118", "242918772136961634160790562421152062576", "245291645703813437035121347828197976188", "248192204068011204195125552735941582264", 
                                    "248361750617680604306031994377309075686", "248685151854184050410498204550829395438", "249539710431385468996300320350260606548", "252686029059538936243953093741628613208", "254763253444610253655726527616193771774", 
                                    "257220914096204140692137664286697634652", "265888654121690901213642987722168798616", "268423481511345387900001408453523196534", "270493426574478905324233935036160352136", "276862607532347199649564638380745002708", 
                                    "278819616806572427315141590295504306264", "290962857821458359403054961835116747388", "298471315404307531566233054142566761377", "300110612744987040841512814122639621256", "303005732170950273332654825295760358288", 
                                    "310815678937085452093500988546040829392", "311028005211171379107105556478330080708", "316202334607989026945615377882566678696", "317779994774194856325267520523146805762", "323533792270318087651947280062934962714", 
                                    "327055527605084582713495130437597301584", "331580202472245400547330939401105860584", "332719613908513958661733760467014142064", "332977270026801714195577353977848255248"];
    pub const DIVISOR_160:[&str;94]=["44013050614219118277426053354358264624", "70869277762513473194949290979474012259632", "235886941617559814101429071900394742307216", "1155189052517692463412433233566791550028994704", "2528254612103739898289725070587552438767681744", 
                                    "8369204084133788819416022562750880966205894256", "12728062741236761104047318607749139214851672848", "12948492728675713966908544982882947609057023408", "23829871170854223127039514625237241224387775248", 
                                    "27856724627491012081062699886029679493149781328", "30547040330444402434802326026341296558786525392", "36240972538025281616867556035804800970531862384", "43967790470167651121720794590226459160490120528", 
                                    "52260185789172204042840882734257808566387542672", "56361440609693193224776122668319857031000490512", "66867146513821294250840138601273646861122168624", "79317238824840820658293030973199011075915026224", 
                                    "99452854457354429654064194460532377350890956912", "118272157443962888700422018114429497329912275472", "146345891352875316989244888133648879590772794864", "156447110867603280917189840573416285193503399344", 
                                    "160479521735996649411003769124300050935596816496", "183497520195963806826512809497601992013615709232", "217663193241555866471377014284673675205064746032", "278501050338111610762022966010945816636860841744", 
                                    "288655936952901828171153086128415962821816131184", "331026792056440038789994003790849750419844651856", "336759654401512652559216891272383225221811288176", "342401210208201140176890527918974985114029532784", 
                                    "401603919924560824052822378468904950026246221552", "438103913022161677772746127568275542633397707728", "522477672008354961422055556813782771153272210256", "579685415197427861355247715558624210829117629776", 
                                    "599603997219056456741690924477829434025976599664", "610767743090051339175904429529596018380276752016", "621345277839410668806442433192707077521933503536", "631754345595413371312290974047686240139969983024", 
                                    "640471210209081242359101407472864476389408814864", "685606770253758127276949191067793999902942013488", "724487487067647924886874950471016168192071030416", "732055320528583343914986779393951799514687130814", 
                                    "772831556512358380436790511120387015664215144337", "780428280845475807410544103976519650098699639372", "791261233746885315301608306781738154523278995384", "812210387473384671165818719161590108135939725694", 
                                    "814270245869589392792650592145608839560419709717", "821898202163605968762138176533581329256010816272", "853940480152334575006327879796563890014539388086", "855760542297694841201519454773471615274596011254", 
                                    "865879857171178958853032254790755870912072369612", "869528122796141792032871573337936316243676444664", "875950722808981711368395573136804444690132623374", "899405995828584685112536386716744151038964899496", 
                                    "903427286654034272531025302012527443854159362357", "911815883236592761068491698425108586615456060856", "919073223470794947609529432430879218834526640647", "926985050160687123353514643087414256104353786672", 
                                    "927618297757806621760425668533076102053378882428", "934469969526548945066097065778869230207038933223", "938407230151275313529693286678924795165961411206", "949503836937980175681772300652108634702281164268", 
                                    "951527579845889704164804072273552925125501740652", "960706815313621863538652111209296714584113222296", "976073760704777791886649039191935732686249507752", "984044788159882539237860949020297285626466232374", 
                                    "992311935624261483443438881192021214769354631824", "1000415570822054179739776177362677462300258706588", "1026902221108575074456572208292207547784769910383", "1028410155380637190915423786601690999854413020232", 
                                    "1040571041127301076547392138635359533464932852496", "1041071284915238450723978289723305949932593431413", "1041376853240719882614416792303207125732397538672", "1085693661159452523723534122860811786080559612956", 
                                    "1114438104129081078068972277656476220262081793871", "1114765206595805199312902119827787190681882815824", "1141014056396926454935359273031295487032794681672", "1143498184212680819631318680678637758471678172816", 
                                    "1186891850620327972952412460172607231784918493076", "1188078263110159104489599536303843810494311738758", "1215724424033667162127329386122589049524515999069", "1218315581210077006748728078742385162203909588541", 
                                    "1236824397010408829013900891377434802737838509904", "1251209640201700418039591048905233060221281881608", "1268703439794519605553072096364737233500668987536", "1280910720228501862509491819694845835021809082129", 
                                    "1298819785756768438279548382186133806368108554418", "1313926084213472567052593359705206667035198935061", "1333887427762738906319701569816903283067011608784", "1336730433885378565636346739601452366664243732176", 
                                    "1367723824854889141602737547637662879923184091284", "1369202961478100099275429611056276730379693213844", "1424255755406970263522658450978162952053421746402", "1425928646522802082214359957137615479605805407157", 
                                    "1426347175623630612323609842654826402846077143408"];

}
impl <'a>FieldElement<'a,U256> for ImplicitP256r1{
    const PRIME:&'a str ="115792089210356248762697446949407573529996955224135760342422259061068512044369";
    const PRIME_ROOT:&'a str = "7";
    
    fn zero()->Self {
        Self { num: U256::zero() }
    }
    fn one()->Self {
        Self { num: U256::one() }
    }
    fn prime()->U256 {
        U256::from_dec_str(Self::PRIME).expect("error in Prime Field 192")
    }
    fn new(num:U256)->ImplicitP256r1{
          let prime = U256::from_dec_str(Self::PRIME).expect("error");
            ImplicitP256r1 {num:num%prime}
    }
    fn double(&mut self)->ImplicitP256r1 {
        let doub=self.num.mod_fast(Self::prime())+self.num.mod_fast(Self::prime());
    Self::new(doub.mod_fast(Self::prime()))
    }
    fn multiple(&self,n:U256)->Self {
        let mul=(self.num*n.mod_fast(Self::prime())).mod_fast(Self::prime());
        Self{num:mul}
    }
    fn square(&mut self)->Self{
        let sqr=self.num.pow_mod(U256::from(2),Self::prime());
        ImplicitP256r1::new(sqr)
    }
    fn power(&mut self,n: U256) -> Self {
        /*Montgomery ladder */
        
        let bin=U256::to_binary(n);
        let mut p0=ImplicitP256r1::new(U256::one());
        let mut p1=*self;
        for i in bin.iter() {
            if *i==U256::zero() {
                p1=p1*p0;
                p0=p0.square();
                
                /* println!("p0 is {:?}",p0);
                println!("p1 is {:?}",p1); */
            }
            else {
                p0=p0*p1;
                p1=p1.square();
              /*   println!("p0 is {:?}",p0);
                println!("p1 is {:?}",p1); */
                }
        }
        p0
        
    }
    fn inverse (&mut self)-> ImplicitP256r1 {
        ImplicitP256r1::power(self, Self::prime()-U256::from(2))
}
fn rand_mod()-> ImplicitP256r1{
    let prime=U256::from_dec_str(Self::PRIME).expect("error");
    let num=U256::random().mod_fast(prime);
    ImplicitP256r1::new(num)
}
    }

impl Add for ImplicitP256r1{
    type Output = Self;
    fn add(self:Self,rhs:Self) -> Self::Output{
        let sum=self.num.mod_fast(Self::prime())+rhs.num.mod_fast(Self::prime());
        ImplicitP256r1::new(sum)

}  
}
impl Mul for ImplicitP256r1{
    type Output = Self;
    fn mul(self, rhs: Self) -> Self::Output {
        let mul=self.num*rhs.num;
        ImplicitP256r1::new(mul)}
}
impl Neg for ImplicitP256r1{
    type Output = Self;
    fn neg(self) -> Self::Output {
        ImplicitP256r1 {num:Self::prime()-self.num}
    }
}

impl Sub for ImplicitP256r1{
    type Output = Self;
    fn sub(self, other: Self) -> Self {
        
            ImplicitP256r1::new(self.num + other.neg().num)}
        }  